<?xml version="1.0" encoding="UTF-8"?>

<!--
多环境日志输出要以logback-spring.xml命名
据不同环境（prod:生产环境，test:测试环境，dev:开发环境）来定义不同的日志输出，在 logback-spring.xml中使用 springProfile 节点来定义，方法如下：

文件名称不是logback.xml，想使用spring扩展profile支持，要以logback-spring.xml命名
可以启动服务的时候指定 profile （如不指定使用默认），如指定prod 的方式为：

java -jar xxx.jar --spring.profiles.active=prod
-->

<!-- * scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
     * scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
     当scan为true时，此属性生效。默认的时间间隔为1分钟。
     * debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false-->
<configuration debug="false">
    <contextName>jwt_logback</contextName>
    <!--  <configuration>下面一共有2个属性，3个子节点，分别是:
    属性一：设置上下文名称<contextName>
    每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。
    <contextName>logback</contextName>
    属性二：设置变量<property>
    用来定义变量值的标签，<property> 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。
    <property name="log.path" value="E:\\logback.log" />
      -->

    <!-- 开发环境和测试环境 使用，分割 -->
    <springProperty name="dev,test">
        <logger name="com.god" level="info"/>
    </springProperty>
    <!-- 生产环境 -->
    <springProperty name="prod">
        <logger name="com.god" level="ERROR"/>
    </springProperty>


    <!--通过spring引入环境变量-->
    <springProperty scope="context" name="logPath" source="log.path"/>
    <springProperty scope="context" name="logLevel" source="log.level.default"/>
    <springProperty scope="context" name="mybatisLogLevel" source="log.level.mybatis"/>
    <springProperty scope="context" name="redisLogLevel" source="log.level.redis"/>
    <springProperty scope="context" name="mysqlLogLevel" source="log.level.mysql"/>
   <springProperty scope="context" name="parcelxLogLevel" source="log.level.parcelx"/>
    <!-- 控制台输出 -->
    <!-- appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <!-- ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志 -->
<!--        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
<!--            <level>ERROR</level>-->
<!--        </filter>-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %logger{52}——日志输出者的名字 %msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}:%L - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logPath}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${logPath}.%d{yyyy-MM-dd_HH}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
            <!-- 大小达到1GB自动删除旧的日志 -->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50}:%L - %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>50MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!--sql log configure-->
    <!-- <logger name="java.sql.Connection" level="${mysqlLogLevel}"/>
    <logger name="java.sql.Statement" level="${mysqlLogLevel}"/>
    <logger name="java.sql.PreparedStatement" level="${mysqlLogLevel}"/> -->

    <!--myibatis log configure-->
<!-- 没有指定level继承root的级别，没有指定appender则继承STDOUT -->
    <logger name="org.mybatis.spring" level="${mybatisLogLevel}"/>

    <logger name="org.apache.ibatis" level="${mybatisLogLevel}"/>

    <!--redis log configure-->
    <logger name="io.lettuce" level="${redisLogLevel}"/>

    <!--parcelx log configure-->
    <logger name="io.parcelx" level="${parcelxLogLevel}"/>
    
    <!--org.springframework log configure-->
    <logger name="org.springframework" level="${logLevel}"/>

    <!-- additivity是否向上级loger传递打印信息 -->
    <logger name="com.god" level="WARN" additivity = "false">
        <appender-ref ref="STDOUT" />
    </logger>

    <!-- 日志输出级别 -->
    <!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
         level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL，默认是DEBUG
     -->
    <root level="${logLevel}">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="FILE" />
    </root>

</configuration>
